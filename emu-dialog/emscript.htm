<!doctype html>
<html lang="sl">
	<!-- Temelji na https://raw.githubusercontent.com/kripken/emscripten/master/src/shell_minimal.html -->
	<head>
		<meta charset="utf-8">
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
		<title>DialogEm</title>
		<style>
			.emscripten { padding-right: 0; margin-left: auto; margin-right: auto; display: block; }
			textarea.emscripten { font-family: monospace; width: 80%; }
			div.emscripten { text-align: center; }
			/* the canvas *must not* have any border or padding, or mouse coords will be wrong */
			canvas.emscripten { border: 0px none; background-color: black; }

			.spinner {
				height: 50px;
				width: 50px;
				margin: 0px auto;
				-webkit-animation: rotation .8s linear infinite;
				-moz-animation: rotation .8s linear infinite;
				-o-animation: rotation .8s linear infinite;
				animation: rotation 0.8s linear infinite;
				border-left: 10px solid rgb(0,150,240);
				border-right: 10px solid rgb(0,150,240);
				border-bottom: 10px solid rgb(0,150,240);
				border-top: 10px solid rgb(100,0,200);
				border-radius: 100%;
				background-color: rgb(200,100,250);
			}
			@-webkit-keyframes rotation {
				from {-webkit-transform: rotate(0deg);}
				to {-webkit-transform: rotate(360deg);}
			}
			@-moz-keyframes rotation {
				from {-moz-transform: rotate(0deg);}
				to {-moz-transform: rotate(360deg);}
			}
			@-o-keyframes rotation {
				from {-o-transform: rotate(0deg);}
				to {-o-transform: rotate(360deg);}
			}
			@keyframes rotation {
				from {transform: rotate(0deg);}
				to {transform: rotate(360deg);}
			}

		</style>
	</head>
	<body>
		<figure style="overflow:visible;" id="spinner"><div class="spinner"></div><center style="margin-top:0.5em"><strong>emscripten</strong></center></figure>
		<div class="emscripten" id="status">Nalagam...</div>
		<div class="emscripten">
			<progress value="0" max="100" id="progress" hidden=1></progress>
		</div>
		<div class="emscripten_border">
			<canvas class="emscripten" id="canvas" oncontextmenu="event.preventDefault()"></canvas>
		</div>

<p>To je emulator Dialoga - program, ki replicira njegovo delovanje. Z njim lahko izvajate programsko opremo, razvito za Dialog.</p>
<p>Opomba: emulator še ni končan in ima nekaj hroščev. Če nekatere tipke ne delujejo, poskusite uporabiti angleški razpored tipkovnice.</p>
<p>Kratek uvod v operacijski sistem FEDOS:</p>
<ul>
<li><kbd>DIR</kbd> izpiše imena datotek na disketi.</li>
<li><kbd>TYPE</kbd> izpiše vsebino besedilne datoteke na zaslon.</li>
</ul>
<p>Programe (datoteke z imeni, ki se končajo s ".COM") zaženete tako, da vtipkate njihovo ime (ne nujno s ".COM") in pritisnete Enter. Zanimivejši programi so <kbd>FEBASIC</kbd>, <kbd>WS</kbd> (WordStar v slovenščini) in <kbd>TURBO</kbd> (Turbo Pascal).</p>
<p>Na disketi je tudi nekaj programov, napisanih v FEBASIC-u (datoteke z imeni, ki se končajo s ".BAS"). Naložite jih tako, da zaženete FEBASIC, pritisnete Enter ob <samp>EXTENDED BASIC NAME</samp>, nato pa vtipkate npr. <kbd>LOAD "TENIS.BAS"</kbd> in nato <kbd>RUN</kbd>.</p>
<p>Programe v FEBASIC-u prekinete s Ctrl+C, sam FEBASIC pa z ukazom <kbd>SYSTEM</kbd>. Več o FEBASIC-u lahko preberete v njegovem priročniku, ki je objavljen na portalu.</p>
<p>Za informacije o WordStaru uporabite ukaz <kbd>TYPE WS.DOC</kbd>.</p>
<p>Posebne tipke (izven FEBASIC-a in WordStara navadno ne naredijo ničesar):</p>
<ul>
<li>F1 je SET UP,</li>
<li>F9 je PF1,</li>
<li>F10 je PF2,</li>
<li>F11 je PF3,</li>
<li>F12 je PF4.</li>
</ul>
<p>Emulirani računalnik resetirate z Alt+R.</p>

<center>
<img src="Logo1.jpg">
<img src="Logo2.png">
<img src="Logo3.png" height="200%">
<img src="Logo4.jpg" height="120">
</center>

		<script type='text/javascript'>
			var statusElement = document.getElementById('status');
			var progressElement = document.getElementById('progress');
			var spinnerElement = document.getElementById('spinner');

			var Module = {
				preRun: [],
				postRun: [],
				print: (function() {
					var element = document.getElementById('output');
					if (element) element.value = ''; // clear browser cache
					return function(text) {
						if (arguments.length > 1) text = Array.prototype.slice.call(arguments).join(' ');
						// These replacements are necessary if you render to raw HTML
						//text = text.replace(/&/g, "&amp;");
						//text = text.replace(/</g, "&lt;");
						//text = text.replace(/>/g, "&gt;");
						//text = text.replace('\n', '<br>', 'g');
						console.log(text);
						if (element) {
							element.value += text + "\n";
							element.scrollTop = element.scrollHeight; // focus on bottom
						}
					};
				})(),
				printErr: function(text) {
					if (arguments.length > 1) text = Array.prototype.slice.call(arguments).join(' ');
					if (0) { // XXX disabled for safety typeof dump == 'function') {
						dump(text + '\n'); // fast, straight to the real console
					} else {
						console.error(text);
					}
				},
				canvas: (function() {
					var canvas = document.getElementById('canvas');

					// As a default initial behavior, pop up an alert when webgl context is lost. To make your
					// application robust, you may want to override this behavior before shipping!
					// See http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.15.2
					canvas.addEventListener("webglcontextlost", function(e) { alert('WebGL context lost. You will need to reload the page.'); e.preventDefault(); }, false);

					return canvas;
				})(),
				setStatus: function(text) {
					if (!Module.setStatus.last) Module.setStatus.last = { time: Date.now(), text: '' };
					if (text === Module.setStatus.text) return;
					var m = text.match(/([^(]+)\((\d+(\.\d+)?)\/(\d+)\)/);
					var now = Date.now();
					if (m && now - Date.now() < 30) return; // if this is a progress update, skip it if too soon
					if (m) {
						text = m[1];
						progressElement.value = parseInt(m[2])*100;
						progressElement.max = parseInt(m[4])*100;
						progressElement.hidden = false;
						spinnerElement.hidden = false;
					} else {
						progressElement.value = null;
						progressElement.max = null;
						progressElement.hidden = true;
						if (!text) spinnerElement.hidden = true;
					}
					statusElement.innerHTML = text;
				},
				totalDependencies: 0,
				monitorRunDependencies: function(left) {
					this.totalDependencies = Math.max(this.totalDependencies, left);
					Module.setStatus(left ? 'Pripravljam... (' + (this.totalDependencies-left) + '/' + this.totalDependencies + ')' : 'Vsi prenosi končani.');
				}
			};
			Module.setStatus('Nalagam...');
			window.onerror = function() {
				Module.setStatus('Exception thrown, see JavaScript console');
				spinnerElement.style.display = 'none';
				Module.setStatus = function(text) {
					if (text) Module.printErr('[post-exception status] ' + text);
				};
			};
		</script>
		<script async type="text/javascript" src="emscript.js"></script>
	</body>
</html>
